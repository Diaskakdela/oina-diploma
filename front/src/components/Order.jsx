import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import X from '../img/X.png'


function Order({ toggleCart }) {
    const [cart, setCart] = useState([]);
    const navigate = useNavigate()

    useEffect(() => {
        if (localStorage.cart) {
            const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
            setCart(cartItems);
        }

    }, []);

    const calculateTotal = () => {
        return cart.reduce((total, item) => total + (item.price * item.count), 0);
    };

    React.useEffect(() => {
        // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        document.body.style.overflow = 'hidden';
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏, –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Order —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
        return () => {
            document.body.style.overflow = 'auto';
        };
    }, []); // –í—ã–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    async function PayOrder(event) {
        event.preventDefault();

        if (localStorage.orderId) {
            try {
                const response = await fetch(`${process.env.REACT_APP_ORDER_SERVICE_URL}/order/pay`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify({
                        "orderId": localStorage.orderId
                    }),
                });
                const data = await response.json();
                console.log(data)

                if (data.success === true) {
                    localStorage.removeItem('orderId');
                    localStorage.removeItem('cart')
                    localStorage.order = false
                    alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                    window.location.reload();
                }
                else if (data.message === "NOT_ENOUGH_TOKENS") {
                    alert("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤")
                }
                else if (data.message === "NO_SUBSCRIPTION") {
                    alert("–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏")
                    navigate('/Subscription')
                }
            } catch (error) {
                console.error('Error puy order:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–æ—Ä–∑–∏–Ω—ã');
            }
        }
    }


    async function CancelOrder(event) {
        event.preventDefault();

        if (localStorage.orderId) {
            try {
                const response = await fetch(`${process.env.REACT_APP_ORDER_SERVICE_URL}/order/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify({
                        "orderId": localStorage.orderId
                    }),
                });
                const data = await response.json();
                console.log(data)

                if (data.success === true || data.message === "Cannot cancel order because status is not PENDING") {
                    localStorage.removeItem('orderId');
                    localStorage.removeItem('cart')
                    localStorage.order = false
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
            }
        }
    }

    async function CancelOrderItem(orderItemId) {
        console.log(orderItemId)

        if (localStorage.orderId) {
            try {
                const response = await fetch(`${process.env.REACT_APP_ORDER_SERVICE_URL}/order-item/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify({
                        "orderItemId": orderItemId
                    }),
                });
                const data = await response.json();
                console.log(data)

                if (data.success === true) {
                    const updatedCart = cart.filter(item => item.orderItemId !== orderItemId);
                    localStorage.setItem('cart', JSON.stringify(updatedCart));
                    setCart(updatedCart);
                    if (updatedCart.length === 0) {
                        CancelOrder()
                    }
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
            }
        }
    }

    return (
        <div className="order-overlay" onClick={toggleCart}>
            <div className="order" onClick={e => e.stopPropagation()}>
                <Link className='back-link' id="button" onClick={toggleCart}>ü†à–ù–ê–ó–ê–î</Link>
                <div className='Order-clear'>
                    <h1>–ö–æ—Ä–∑–∏–Ω–∞</h1>
                    <img src={X} className="crossIcon" alt=""></img>
                    <h2 onClick={CancelOrder}>–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</h2>
                </div>
                {cart.length > 0 ? (
                    <div className="cart-items">
                        {cart.map(item => (
                            <div key={item.id} className="cart-item">
                                <img src={`${process.env.REACT_APP_TOY_SERVICE_URL}/Images/${item.imageUrl}`} alt={item.name} />
                                <div className='cart-text'>
                                    <div className="cart-item-details">
                                        <h2>{item.name}</h2>
                                        <p>{item.price} –¢–æ–∫–µ–Ω–æ–≤</p>
                                    </div>
                                    <div className='cart-item-count'></div>
                                    <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.count}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                ) : (
                    <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                )}
                {cart.length > 0 && (
                    <div className="total-sum">
                        <h2>–ò—Ç–æ–≥–æ: {calculateTotal()} –¢–æ–∫–µ–Ω–æ–≤</h2>
                    </div>
                )}
                <div className="payment-button-container">
                    <button className="payment-button" onClick={PayOrder} >–û–ø–ª–∞—Ç–∏—Ç—å</button>
                </div>
            </div>
        </div>
    );
}

export default Order;