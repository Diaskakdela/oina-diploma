import React, { useEffect, useState, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';

function ToyDetails() {
    const { id } = useParams();
    const [toy, setToy] = useState(null);
    const [InStock, setInStock] = useState(null);
    const [showForm, setShowForm] = useState(false);
    const [count, setCount] = useState();
    const [location, setLocation] = useState();

    const fetchToyDetails = useCallback(async () => {
        try {
            const response = await fetch(`${process.env.REACT_APP_TOY_SERVICE_URL}/toys/${id}`, {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.token
                },
            });
            const data = await response.json();
            setToy(data);
        } catch (error) {
            console.error('Error fetching toy details:', error);
        }
    }, [id]);

    const fetchToyInfo = useCallback(async () => {
        try {
            const response = await fetch(`${process.env.REACT_APP_INVENTORY_SERVICE_URL}/inventory/info/${id}`, {
                method: 'GET'
            });
            const infdata = await response.json();
            setInStock(infdata.data.count);
        } catch (error) {
            console.error('Error fetching toy info:', error);
        }
    }, [id]);

    async function AddToyInStock(event) {
        event.preventDefault();

        const toyData = {
            "toyId": id,
            location,
            count
        };
        if (!count || !location) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        } else {
            try {
                const response = await fetch(`${process.env.REACT_APP_INVENTORY_SERVICE_URL}/inventory/admin/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify(toyData),
                });

                if (response.ok) {
                    alert('–ò–≥—Ä—É—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–∫–ª–∞–¥');
                    window.location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–∫–ª–∞–¥');
                }
            } catch (error) {
                console.error('Error adding toy:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }

    useEffect(() => {
        fetchToyDetails();
        fetchToyInfo();
    }, [fetchToyDetails, fetchToyInfo]);


    async function addToOrder(event) {
        event.preventDefault()

        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        localStorage.setItem('cart', JSON.stringify(cart));

        if (localStorage.order === 'false') {
            try {
                const response = await fetch(`${process.env.REACT_APP_ORDER_SERVICE_URL}/order`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify({
                        "toyId": id,
                        "renterId": localStorage.renterId,
                        "count": 1
                    }),
                });
                const data = await response.json()
                console.log(data)
                if (data.success === true) {
                    localStorage.order = true
                    localStorage.setItem('orderId', data.data.order.id)
                    const newItem = { orderItemId: data.data.orderItems[0].id, id: toy.id, name: toy.name, price: toy.price, imageUrl: toy.imageUrl, count: 1 };
                    const existingItemIndex = cart.findIndex(item => item.id === toy.id);
                    if (existingItemIndex !== -1) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        cart[existingItemIndex].count += 1;
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                        cart.push(newItem);
                    }
                    localStorage.setItem('cart', JSON.stringify(cart));
                    window.location.reload();
                }
                else {
                    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É")
                }
            } catch (error) {
                console.error('Error adding toy:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
        else if (localStorage.order === 'true') {
            try {
                const response = await fetch(`${process.env.REACT_APP_ORDER_SERVICE_URL}/order-item`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.token
                    },
                    body: JSON.stringify({
                        "toyId": id,
                        "renterId": localStorage.renterId,
                        "orderId": localStorage.orderId,
                        "count": 1
                    }),
                });
                const data = await response.json()
                console.log(data)
                if (data.success === true) {
                    const newItem = { orderItemId: data.data[0].id, id: toy.id, name: toy.name, price: toy.price, imageUrl: toy.imageUrl, count: 1 };
                    const existingItemIndex = cart.findIndex(item => item.id === toy.id);
                    if (existingItemIndex !== -1) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        cart[existingItemIndex].count += 1;
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                        cart.push(newItem);
                    }
                    localStorage.setItem('cart', JSON.stringify(cart));
                    window.location.reload();
                }
                else {
                    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É")
                }
            } catch (error) {
                console.error('Error adding toy:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }

    }

    const handleAddButtonClick = () => {
        if (localStorage.role === "ADMIN" || localStorage.role === "USER and ADMIN") {
            setShowForm(!showForm);
        }

    };

    let button;
    if (localStorage.role === "ADMIN" || localStorage.role === "USER and ADMIN") {
        button = <Link className="buybutton-description" id="button" onClick={handleAddButtonClick}>–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥</Link>
    } 
    else if(localStorage.role === "USER") {
        button = <Link className="buybutton-description" id="button" onClick={addToOrder}>–î–æ–±–∞–≤–∏—Ç—å</Link>
    }
    else {
        button = <Link to="/Signin" className="buybutton-description" id="button">–î–æ–±–∞–≤–∏—Ç—å</Link>
    }

    if (!toy) {
        return <div>Loading...</div>;
    }

    return (
        <div className='toy-details'>
            <div className='toy-details-content'>
                <div className='toy-details-img'>
                    <img src={`${process.env.REACT_APP_TOY_SERVICE_URL}/Images/${toy.imageUrl}`} alt={toy.name} />
                </div>
                <div className='toy-details-description'>
                    <Link to={`/Toys`} className='back-link' id="button">ü†à–ù–ê–ó–ê–î</Link>
                    <h1>{toy.name}</h1>
                    <p>–û—Ç {toy.ageRange} –ª–µ—Ç</p>
                    <p className='price'>–¶–µ–Ω–∞: {toy.price} –¢–û–ö–ï–ù–û–í</p>
                    <p>‚óè –ï—Å–ª–∏ –≤—ã –∞—Ä–µ–Ω–¥—É–µ—Ç–µ —ç—Ç—É –∏–≥—Ä—É—à–∫—É –ø–æ –ø–ª–∞–Ω—É Toy Sack, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ
                        ‚Ç∏20000/2000 –∂–µ—Ç–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—É—à–∫–∏</p>
                    <p>‚óè –ê—Ä–µ–Ω–¥—É–π—Ç–µ –∏–≥—Ä—É—à–∫–∏ –Ω–∞ —Å—É–º–º—É –¥–æ 23000 —Ç–µ–Ω–≥–µ –∑–∞ –æ–¥–∏–Ω –æ–±–º–µ–Ω.</p>
                    <p>‚óè –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–≤–∞–ø—ã</p>
                    <p>‚óè –£–ø–∞–∫–æ–≤–∫–∞ –±–µ–∑ –ø–ª–∞—Å—Ç–∏–∫–∞, –ø—Ä–∏–≥–æ–¥–Ω–∞—è –¥–ª—è –≤—Ç–æ—Ä–∏—á–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</p>
                    <p>‚óè –î–æ—Å—Ç–∞–≤–∫–∞ –∫ –≤–∞—à–µ–π –¥–≤–µ—Ä–∏</p>
                    <h3>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {InStock}</h3>
                </div>
            </div>
            <div className='toy-details-button'>
                {button}
            </div>

            {showForm && (
                <div className="Signup">
                    <h1>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥</h1>
                    <form onSubmit={AddToyInStock}>
                        <div className="form-text">
                            <h4>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</h4>
                            <input type="string" name='count' id="Description" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä—É—à–µ–∫" minLength="1" value={count} onChange={(e) => setCount(e.target.value)} />
                        </div>
                        <div className="form-text">
                            <h4>–ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è</h4>
                            <input type="string" name='location' id="AgeRange" placeholder="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è" minLength="2" value={location} onChange={(e) => setLocation(e.target.value)} />
                        </div>
                        <br /><button type="submit" className="button" >–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É—à–∫—É –Ω–∞ —Å–∫–ª–∞–¥</button>
                    </form>
                </div>
            )}

        </div>
    );
}

export default ToyDetails;
